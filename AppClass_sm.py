# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AppClass.sm

import statemap


class AppClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Alpha(self, fsm):
        self.Default(fsm)

    def Colon(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Heading(self, fsm):
        self.Default(fsm)

    def Slash(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(AppClassState):

    def Alpha(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)


    def Colon(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)


    def Slash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)


    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)


    def Heading(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ClearSMC()
        finally:
            fsm.setState(Map1.Heading)
            fsm.getState().Entry(fsm)


    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map1.Error)
            fsm.getState().Entry(fsm)


class Map1_Heading(Map1_Default):

    def Alpha(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.isValidHeading()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
            finally:
                fsm.setState(Map1.Heading)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Alpha(self, fsm)
        
    def Colon(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.checkHeading()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterZero()
                ctxt.clearSubstring()
            finally:
                fsm.setState(Map1.Heading2)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Colon(self, fsm)
        
class Map1_Heading2(Map1_Default):

    def Slash(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Heading3)
        fsm.getState().Entry(fsm)


class Map1_Heading3(Map1_Default):

    def Slash(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.CounterZero()
        finally:
            fsm.setState(Map1.Server)
            fsm.getState().Entry(fsm)


class Map1_Server(Map1_Default):

    def Alpha(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.isValid()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
            finally:
                fsm.setState(Map1.Server)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Alpha(self, fsm)
        
    def Slash(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.isValid() and ctxt.isValidName()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
                ctxt.set_name()
                ctxt.clearSubstring()
            finally:
                fsm.setState(Map1.Catalog)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Slash(self, fsm)
        
class Map1_Catalog(Map1_Default):

    def Alpha(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.isValid()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
            finally:
                fsm.setState(Map1.Catalog)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Alpha(self, fsm)
        
    def Slash(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.isValid()  and ctxt.isValidName() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
                ctxt.clearSubstring()
            finally:
                fsm.setState(Map1.File)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Slash(self, fsm)
        
class Map1_File(Map1_Default):

    def Alpha(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.isValid()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
            finally:
                fsm.setState(Map1.File)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Alpha(self, fsm)
        
    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.isValid() and ctxt.isValidName() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Acceptable()
                ctxt.CounterZero()
                ctxt.clearSubstring()
            finally:
                fsm.setState(Map1.OK)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.EOS(self, fsm)
        
    def Slash(self, fsm):
        ctxt = fsm.getOwner()
        if  ctxt.isValid() and ctxt.isValidName() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
                ctxt.clearSubstring()
            finally:
                fsm.setState(Map1.File)
                fsm.getState().Entry(fsm)
        else:
            Map1_Default.Slash(self, fsm)
        
class Map1_OK(Map1_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)


class Map1_Error(Map1_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)


class Map1(object):

    Heading = Map1_Heading('Map1.Heading', 0)
    Heading2 = Map1_Heading2('Map1.Heading2', 1)
    Heading3 = Map1_Heading3('Map1.Heading3', 2)
    Server = Map1_Server('Map1.Server', 3)
    Catalog = Map1_Catalog('Map1.Catalog', 4)
    File = Map1_File('Map1.File', 5)
    OK = Map1_OK('Map1.OK', 6)
    Error = Map1_Error('Map1.Error', 7)
    Default = Map1_Default('Map1.Default', -1)

class AppClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.Heading)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
